biocLite(c("monocle", "cellTree", "TSCAN", "destiny", "sincell", "cellscape", "timescape",
"mapscape"))
BiocManager::install("monocle")
BiocManager::install("cellTree")
BiocManager::install("TSCAN")
BiocManager::install("cellscape")
BiocManager::install("timescape")
BiocManager::install("mapscape")
BiocManager::install("HSMMSingleCell")
install.packages("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/BiCBioEng-celltreegenerator(structure_2).tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/BiCBioEng-celltreegenerator(structure_2).tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/BiCBioEng-celltreegenerator(structure_2)/CellScabbard_0.1.5.tar.gz", repos = NULL, type = "source")
library(devtools)
library("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket("edith_ross/oncoNEM")
library(cellTreeGenerator)
install.packages("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/BiCBioEng-celltreegenerator(structure_2)/cellTreeGenerator_0.2.11.tar.gz", repos = NULL, type = "source")
library(monocle)
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/BiCBioEng-celltreegenerator(structure_2)/cellTreeGenerator_0.2.11.tar.gz", repos = NULL, type = "source")
library(HSMMSingleCell)
# load the data for cellTree, TSCAN, monocle, destiny, and sincell:
data(HSMM_expr_matrix)
data(HSMM_sample_sheet)
data(HSMM_gene_annotation)
# load data for Canopy:
library(Canopy)
data("MDA231")
# load data for cellscape
cs_tree_edges <- read.csv(system.file("extdata", "cnv_tree_edges.csv",
package = "cellscape"))
cs_cnv_data <- read.csv(system.file("extdata", "cnv_data.csv",
package = "cellscape"))
cs_sc_annot <- read.csv(system.file("extdata", "cnv_annots.tsv",
package = "cellscape"), sep="\t")
cs_clone_colours <- data.frame(clone_id = c("1","2","3"),
colour = c("7fc97f", "beaed4", "fdc086"))
# load data for timescape
ts_tree_edges <- read.csv(system.file("extdata", "AML_tree_edges.csv",
package = "timescape"))
ts_clonal_prev <- read.csv(system.file("extdata", "AML_clonal_prev.csv",
package = "timescape"))
ts_mutations <- read.csv(system.file("extdata", "AML_mutations.csv",
package = "timescape"))
ts_perturbations <- data.frame(pert_name = c("Chemotherapy"),
prev_tp = c("Diagnosis"))
# load data for mapscape
ms_clonal_prev <- read.csv(system.file("extdata", "A21_clonal_prev.csv",
package = "mapscape"))
ms_mutations <- read.csv(system.file("extdata", "A21_mutations.csv",
package = "mapscape"))
ms_sample_locations <- read.csv(system.file("extdata", "A21_sample_locations.csv",
package = "mapscape"))
ms_tree_edges <- read.csv(system.file("extdata", "A21_tree.csv",
package = "mapscape"))
ms_img_ref <- system.file("extdata", "A21_anatomical_image.png",
package = "mapscape")
ms_sample_ids <- c("H","F","J","D","A","I","C","E","G")
library(oncoNEM)
set.seed(1)
simData <- simulateData(N.cells = 20,
N.clones = 5,
N.unobs = 1,
N.sites = 300,
FPR = 0.2,
FNR = 0.1,
p.missing = 0.2)
od <- simData$D
library(Biobase)
pd <- AnnotatedDataFrame(data = HSMM_sample_sheet)
fd <- AnnotatedDataFrame(data = HSMM_gene_annotation)
library(CellScabbard)
toyScabbard <- newCellScabbard(exprsData = HSMM_expr_matrix,
phenoData = pd,
featureData = fd)
CanopyData(toyScabbard) <- MDA231
CanopyData(toyScabbard)$K <- 3:6
CanopyData(toyScabbard)$numchain <- 20
CanopyData(toyScabbard)$max.simrun <- 50000
CanopyData(toyScabbard)$min.simrun <- 10000
CanopyData(toyScabbard)$writeskip <- 200
CanopyData(toyScabbard)$cell.line <- TRUE
CanopyData(toyScabbard)$plot.likelihood <- TRUE
CanopyData(toyScabbard)$burnin <- 75
CanopyData(toyScabbard)$thin <- 5
CanopyData(toyScabbard)$pdf <- TRUE
cellscapeData(toyScabbard, "clone_colours") <- cs_clone_colours
cellscapeData(toyScabbard, "tree_edges") <- cs_tree_edges
cellscapeData(toyScabbard, "cnv_data") <- cs_cnv_data
cellscapeData(toyScabbard, "sc_annot") <- cs_sc_annot
# store timescape data
timescapeData(toyScabbard, "tree_edges") <- ts_tree_edges
timescapeData(toyScabbard, "clonal_prev") <- ts_clonal_prev
timescapeData(toyScabbard, "mutations") <- ts_mutations
timescapeData(toyScabbard, "perturbations") <- ts_perturbations
# store mapscape data
mapscapeData(toyScabbard, "clonal_prev") <- ms_clonal_prev
mapscapeData(toyScabbard, "mutations") <- ms_mutations
mapscapeData(toyScabbard, "sample_locations") <- ms_sample_locations
mapscapeData(toyScabbard, "tree_edges") <- ms_tree_edges
mapscapeData(toyScabbard, "img_ref") <- ms_img_ref
mapscapeData(toyScabbard, "sample_ids") <- ms_sample_ids
cellTreeInfo(toyScabbard) <- "Hours"
monocleInfo(toyScabbard) <- c("gene_short_name", "MYF5", "ANPEP", "FPKM")
TSCANinfo(toyScabbard) <- "ENSG00000000003.10"
sincellInfo(toyScabbard, "method") <- "pearson"
sincellInfo(toyScabbard, "method") <- "classical-MDS"
sincellInfo(toyScabbard, "MDS.distance") <- "spearman"
sincellInfo(toyScabbard, "clust.method") <- "k-medoids"
oncoNEMdata(toyScabbard) <- od
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "cellTree")
library(CellScabbard)
library(cellTreeGenerator)
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "cellTree")
getwd()
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "monocle")
load(digest)
library(digest)
library(Biobase)
library(cellTree)
library(AnnotationDbi)
library(digest)
library(oncoNEM)
library(cellTreeGenerator)
library(HSMMSingleCell)
library(Canopy)
library(CellScabbard)
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "monocle")
save.image("~/cellTreeGenerator.RData")
library(CellScabbard)
library(Biobase)
library(oncoNEM)
library(HSMMSingleCell)
library(Canopy)
library(cellTreeGenerator)
monocleInfo(toyScabbard) <- c("gene_short_name", "MYF5", "ANPEP", "FPKM")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "monocle")
library(digest)
install.packages("digest")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "monocle")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "TSCAN")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "Canopy")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "destiny")
library(destiny)
install.packages("destiny")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "destiny")
install.packages("destiny")
BiocManager::install("destiny")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "destiny")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "sincell")
library(sincell)
BiocInstaller::install("sincel")
BiocManger::install("sincel")
BiocManager::install("sincel")
BiocManager::install("sincel")
library(sincell)
library(Biobase)
library(CellScabbard)
library(cellTreeGenerator)
BiocManager::install("sincell")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "sincell")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "cellscape")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "timescape")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "mapscape")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "oncoNEM")
names(originalTrees(toyScabbard))
plotOriginalTree(toyScabbard, "monoclePrePCA")
plotOriginalTree(toyScabbard, "monoclePostPCA")
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "monocle")
save.image("~/cellTreeGenerator.RData")
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy/.RData")
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin052519/basin052519 copy')
install.packages("rhandsontable")
library(shiny)
library(shinydashboard)
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-nsui/BiCBioEng-nsui-4532caf69137')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-nsui/BiCBioEng-nsui-4532caf69137')
?sub()
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/Test/Scale/fiveScaleAnalysis05312019/workspace.RData")
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/Test/Scale/fiveScaleAnalysis05312019/workspace.RData")
library(BiocParallel)
library(Canopy)
library(ggm)
library(ggplot2)
library(igraph)
library(irlba)
library(maptpx)
library(VGAM)
library(htmlwidgets)
library(monocle)
library(cellTree)
library(TSCAN)
library(destiny)
library(sincell)
library(cellscape)
library(timescape)
library(mapscape)
library(CellScabbard)
library(devtools)
library(cellTreeGenerator)
library(HSMMSingleCell)
View(fd)
monocleInfo(toyScabbard) <- c("gene_short_name", "COL1A2", "COL3A1", "FPKM")
monocleInfo(thing) <- c("gene_short_name", "COL1A2", "COL3A1", "FPKM")
generate_tree(dataSet = thing, treeTYpe = "monocle")
generate_tree(dataSet = thing, treeType = "monocle")
shiny::runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-nsui/BiCBioEng-nsui-4532caf69137')
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/Test/Scale/fiveScaleAnalysis05312019/workspace.RData")
library(BiocParallel)
library(Canopy)
library(ggm)
library(ggplot2)
library(igraph)
library(irlba)
library(maptpx)
library(VGAM)
library(htmlwidgets)
library(monocle)
library(cellTree)
library(TSCAN)
library(destiny)
library(sincell)
library(cellscape)
library(timescape)
library(mapscape)
library(CellScabbard)
library(devtools)
library(cellTreeGenerator)
library(HSMMSingleCell)
View(HSMM_sample_sheet)
View(HSMM_gene_annotation)
thing <- newCellScabbard(exprsData = fiveScaleMat, featureData = fd)
featureData(thing) <- AnnotatedDataFrame(fd)
View(thing)
thing <- generate_tree(dataSet = thing, treeType = "TSCAN")
View(fiveScaleDF)
View(fiveScale)
TSCANinfo(thing) <- "MALAT1"
thing <- generate_tree(dataSet = thing, treeType = "TSCAN")
fd <- fData(thing)
fd[,1] <- rownames(fd)
colnames(fd) <- "gene_short_name"
featureData(thing) <- AnnotatedDataFrame(fd)
TSCANinfo(thing) <- "MALAT1"
thing <- generate_tree(dataSet = thing, treeType = "TSCAN")
View(HSMM_gene_annotation)
View(HSMM_sample_sheet)
View(HSMM_gene_annotation)
View(HSMM_sample_sheet)
View(HSMM_gene_annotation)
View(HSMM_sample_sheet)
monocleInfo(thing) <- c("gene_short_name", "MYF5", "ANPEP", "FPKM")
monocleInfo(thing) <- c("gene_short_name", "MALAT1", "NEAT1", "FPKM")
thing <- generate_tree(dataSet = thing, treeType = "monocle")
library(BiocParallel)
library(Canopy)
library(ggm)
library(ggplot2)
library(igraph)
library(irlba)
library(maptpx)
library(VGAM)
library(htmlwidgets)
library(monocle)
library(cellTree)
library(TSCAN)
library(destiny)
library(sincell)
library(cellscape)
library(timescape)
library(mapscape)
library(CellScabbard)
library(devtools)
library(cellTreeGenerator)
library(HSMMSingleCell)
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/Test/Scale/fiveScaleAnalysis05312019/workspace.RData")
monocleInfo(thing) <- c("gene_short_name", "MALAT1", "NEAT1", "FPKM")
TSCANinfo(thing) <- "MALAT1"
sincellInfo(thing, "method") <- "pearson"
sincellInfo(thing, "method") <- "classical-MDS"
sincellInfo(thing, "MDS.distance") <- "spearman"
toyScabbard <- generate_tree(dataSet = toyScabbard, treeType = "cellTree")
thing <- generate_tree(dataSet = thing, treeType = "cellTree")
thing <- generate_tree(dataSet = thing, treeType = "monocle")
thing <- generate_tree(dataSet = thing, treeType = "TSCAN")
sessionInfo()
load("~/.RData")
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-nsfunc(5-20-2019)/BiCBioEng-nsfunc-a5123405dde2/vignettes/.Rhistory")
load("~/.RData")
library(NSdata)
library(NSfunc)
library(igraph)
install.packages("igraph")
library(NSdata)
library(NSfunc)
rccFiles <- dir(system.file("extdata", "RCC", package="NanoStringQCPro"),full.names=TRUE)
rlf <- system.file("extdata", "RLF", "NQCP_example.rlf",package="NanoStringQCPro")
cdr <- system.file("extdata", "CDR", "CDR-DesignData.csv",package="NanoStringQCPro")
library(NSdata)
toyNSdata <- newNSdata(rccFiles = rccFiles, rlf = rlf, cdrDesignData = cdr,addEgAnnotations = TRUE)
HousekeepingGenes(toyNSdata) <- c("RBCK1", "USP19")
Species(toyNSdata) <- "Human"
pData <- pData(RCCset(toyNSdata))
DF <- as.data.frame(cbind(pData$FileName, pData$SampleID,
logical(length(pData$SampleID)),
character(length(pData$SampleID))),
stringsAsFactors = F)
colnames(DF) <- c("File Name", "Sample ID", "Blank Samples", "Sample Type")
blanks <- c(3, 5, 9, 17, 18, 20)
DF$`Blank Samples`[blanks] <- TRUE
DF$`Sample Type`[1:13] <- "A"
DF$`Sample Type`[14:25] <- "B"
ClassificationData(toyNSdata) <- DF
sessionInfo()
toyNSdata <- procRccSet(NSdata = toyNSdata)
outputDir <- file.path(getwd(), "Output")
toyNSdata <- qcRccSet(NSdata = toyNSdata, outputDir = outputDir)
toyNSdata <- DESeq2analysis(NSdata = toyNSdata, outputDir = outputDir)
toyNSdata <- NanoStringDiffanalysis(NSdata = toyNSdata, outputDir = outputDir)
toyNSdata <- NanoStringQCProanalysis(NSdata = toyNSdata, outputDir = outputDir)
toyNSdata <- clusterMultipleMethods(NSdata = toyNSdata, fileOutput = outputDir)
View(toyNSdata)
load("~/cellTreeGenerator.RData")
View(toyScabbard)
library(destiny)
class(cellscabbard)
?CellScabbard
library(CellScabbard)
sessionInfo()
load("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-celltreegenerator/Test/Scale/fiveScaleAnalysis05312019/workspace.RData")
View(thing)
load("~/cellTreeGenerator.RData")
View(toyScabbard)
View(toyScabbard)
View(ms_tree_edges)
View(ms_sample_locations)
View(HSMM_expr_matrix)
View(HSMM_gene_annotation)
View(fd)
fd@data[["gene_short_name"]]
View(fd@data[["gene_short_name"]])
View(MDA231)
View(cs_clone_colours)
library(devtools)
setwd("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BASIN")
document()
runShinyBASIN()
setwd("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BASIN/inst")
runShinyBASIN()
?observeReactive
?observeReactive()
?fileInput()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
validate()/
?
crap
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?fileInput
?validate()
str(validate())
returnValue(validate())
returnValue(validate
)
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?reactive()
?need()
returnValue(reactive())
returnValue(reactive
)
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?reactive()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?reactive()
?readImage
?download.file()
setwd("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/Test")
download.file("https://cdn.gobankingrates.com/wp-content/uploads/2016/12/0-Main-RichestPets-Hamilton-1024x576.jpg
")
download.file("https://cdn.gobankingrates.com/wp-content/uploads/2016/12/0-Main-RichestPets-Hamilton-1024x576.jpg
", destfile = getwd())
download.file("https://cdn.gobankingrates.com/wp-content/uploads/2016/12/0-Main-RichestPets-Hamilton-1024x576.jpg", destfile = getwd())
download.file("https://cdn.gobankingrates.com/wp-content/uploads/2016/12/0-Main-RichestPets-Hamilton-1024x576.jpg", destfile = file.path(getwd(),"cat"))
?reactive()
?renderPlot()
?reactiveUI()
?eventReactive
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?reactive()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?renderPlot()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp()
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
runApp('C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/basin060619/basin060619')
?list.files
f <- list.files("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BASIN/inst/2-image", "C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/Test")
f <- list.files("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BASIN/inst/2-image")
file.copy(f, "C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/Test")
?system.file
f = list.files("images", package="EBImage")
f1 = system.file("images", package="EBImage")
f = list.files(package="EBImage")
f = list.files(system.file("images", package="EBImage"))
runShinyBASIN()
library(devtools)
getwd()
setwd("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BASIN")
check()
check()
BiocCheck::BiocCheck()
path.package("NSfunc")
path.package(NSfunc)
library(NSfunc)
path.package(NSfunc)
path.package("NSfunc")
system.file(path.package("NSfunc"),"man")
system.file(path.package("NSfunc"),"R")
?system.file()
file.path(path.package("NSfunc"),"R")
document()
library(devtools)
check()
check()
choco install pandoc
check()
getwd()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
build()
install.packages("C:/Users/evgen/OneDrive/Desktop/BASIN_0.99.0.tar.gz", repos = NULL, type = "source")
library(basin)
library(BASIN)
runShinyBASIN()
browseVignettes()
runShinyBASIN()
path.package(BASIN)
path.package("BASIN")
setwd("C:/Users/evgen/OneDrive/Desktop")
path.package("BASIN")
library(BASIN)
path.package("BASIN")
library(devtools)
setwd("C:/Users/evgen/OneDrive/Desktop/BASIN")
BiocCheck::BiocCheck()
file.info(getwd())
list.files(getwd())
f = list.files(system.file("2-image", package="BASIN"), full.names=TRUE)
file.copy(f, getwd())
list.files(getwd())
BiocCheck::BiocCheck()
document()
BiocCheck::BiocCheck()
BASIN
?BASIN
??BASIN
utils::news(BASIN)
utils::news("BASIN")
utils::news("ctgGEM")
library(BASIN)
utils::news("BASIN")
utils::news("BioBase")
utils::news(BioBase)
utils::news(package = "BASIN")
utils::news(package = "Biobase")
utils::news(package = "EBImage")
?BASIN
setwd("C:/Users/evgen/OneDrive/Desktop/2019_Summer_Research/BiCBioEng-ctggem/ctgGEM")
check()
BiocCheck::BiocCheck()
?check()
check(build_args = no_build_vignettes)
check(no_build_vignettes)
runApp('C:/Users/evgen/OneDrive/Desktop/BASIN/inst/shiny-examples')
runApp('C:/Users/evgen/OneDrive/Desktop/BASIN/inst/shiny-examples')
---
title: "BASIN Group Image Report"
author: ""
date: "`r format(Sys.time(), '%d %B %Y')`"
output: html_document
---
runApp('C:/Users/evgen/OneDrive/Desktop/BASIN/inst/shiny-examples')
runApp('C:/Users/evgen/OneDrive/Desktop/BASIN/inst/shiny-examples')
library(ctgGEM)
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.99.0.tar.gz"))
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.99.0.tar.gz"), file = "bioccheck.txt", type = "message")
BiocManager::install("monocle")
packrat::disable()
library(ctgGEM)

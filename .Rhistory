rownames(fiveScale) <- rn[-1]
length(fiveScale[,1])
length(rn)
fiveScale <- read_csv("D:/OneDrive - The University of South Dakota/Work Projects/Work/fiveScale.csv")
rn <- as.vector(fiveScale[, 1])
rn
rn <- as.character(fiveScale[, 1])
fiveScale <- read_csv("D:/OneDrive - The University of South Dakota/Work Projects/Work/fiveScale.csv")
fiveScaleDF <- as.data.frame(fiveScale)
rn <- fiveScaleDF[, 1]
fiveScaleMat <- as.matrix(fiveScaleDF[, -1])
colnames(fiveScaleMat)
rownames(fiveScaleMat) <- rn
View(fiveScaleMat)
class(fiveScaleMat)[1,1]
class(fiveScaleMat[1,1])
View(dataSet)
library(ctgGEM)
thing <- newctgGEMset(exprsData = fiveScale)
thing <- newctgGEMset(exprsData = fiveScaleMat)
View(fData(thing))
colnames(fData(thing)) <- "gene_short_name"
fd <- fData(thing)
colnames(fd) <- "gene_short_name"
fd[,1] <- rownames(fd)
View(fd)
colnames(fd) <- "gene_short_name"
featureData(thing) <- annotatedDataFrameFrom(fd)
featureData(thing) <- annotatedDataFrameFrom(as.data.frame(fd))
featureData(thing) <- AnnotatedDataFrame(fd)
rm(fiveScale)
rm(fiveScaleMat)
rm(fiveScaleDF)
rm(thing)
rm(rn)
BiocManager::install("BiocCheck")
library("BiocCheck")
BiocCheck()
rm(list=ls())
BiocManager::install("tibble")
BiocManager::install("ggplot2")
BiocManager::install("monocle")
library("BiocCheck")
BiocCheck()
BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz")
check1 <- BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz")
check1
?is
?vector
?seq_along
?stop
check1
require(stats); require(graphics)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# compute the list mean for each list element
lapply(x, mean)
# median and quartiles for each list element
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
i39 <- sapply(3:9, seq) # list of vectors
vapply(i39, fivenum,
c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
rm(i39)
rm(x)
library(HSMMSingleCell)
data(HSMM_expr_matrix)
data(HSMM_sample_sheet)
data(HSMM_gene_annotation)
library(Biobase)
pd <- AnnotatedDataFrame(data = HSMM_sample_sheet)
fd <- AnnotatedDataFrame(data = HSMM_gene_annotation)
dataSet <- newctgGEMset(exprsData = HSMM_expr_matrix,
phenoData = pd,
featureData = fd)
source('D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM/R/tree2igraph.R')
if (!requireNamespace("TSCAN", quietly = TRUE)) {
stop(
"Package 'TSCAN' is required for treeType = 'TSCAN',
but is not installed.  See vignette for details on installing
'TSCAN'",
call. = FALSE
)
}
d <- Biobase::exprs(dataSet)
if (length(TSCANinfo(dataSet)) == 0) {
gene <- NULL
} else {
gene <- TSCANinfo(dataSet)
}
# preprocess the input data
procdata <- TSCAN::preprocess(d, minexpr_value = 1)
# if no data makes it through, re-run with lower threshold
if (length(procdata[, 1]) < 1) {
procdata <- TSCAN::preprocess(d, minexpr_value = 0.1)
}
# cluster the processed data
cellmclust <- TSCAN::exprmclust(procdata)
# get the cell orderings
cellorder <- TSCAN::TSCANorder(cellmclust)
# generate the clustering plot
TSCANclustering <- TSCAN::plotmclust(cellmclust)
#format the filename
filename <- as.character(Sys.time())
filename <- gsub("/", "-", filename)
filename <- gsub(":", "-", filename)
filename <- gsub(" ", "_", filename)
TSCANinfo(dataSet) <- "ENSG00000000003.10"
gene <- TSCANinfo(dataSet)
if (!is.null(gene)) {
# get log of gene
geneExpr <- log2(d[gene, ] + 1)
# get ordering
cellOrderS <-
TSCAN::TSCANorder(cellmclust, flip = TRUE, orderonly = FALSE)
# generate a plot for single gene vs the pseudotime
TSCANsingleGene <- TSCAN::singlegeneplot(geneExpr, cellOrderS)
#open png writer
grDevices::png(filename = paste0(
"./CTG-Output/Plots/",
filename,
"_TSCANsingleGene.png"
))
# generate the plot for backbone tree showing topics
graphics::plot(TSCANsingleGene)
#close the writing device
grDevices::dev.off()
# store the plot
# ANY CHANGES MADE IN THE FOLLOWING LINE OF CODE MUST BE CHECKED FOR
# COMPATIBILITY WITH plotOriginalTree
originalTrees(dataSet, "TSCANsingleGene") <- TSCANsingleGene
}
# convert data to standard cell tree format
tree <- TSC2CTF(cellorder, filename)
TSC2CTF <- function(cellOrder, timeStamp) {
# cells in cellOrder have relationships with the next cell
nextCellOrder <- c(tail(cellOrder,-1), NA)
# relate the cell with the next cell in the ordering
relationships <-
paste0(cellOrder, "\tpsuedotime\t", nextCellOrder)
# remove the last element because it contains no second cell
relationships <- head(relationships,-1)
# write these relationships to file
write(relationships,
paste0("./CTG-Output/SIFs/", timeStamp, "_TSC_CTF.sif"))
relationships
}
tree <- TSC2CTF(cellorder, filename)
tree2igraph(tree)
source('D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM/R/tree2igraph.R')
tree2igraph(tree)
library(igraph)
tree2igraph(tree)
check1
devtools::document()
BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz")
rm(list = ls())
check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz")
check
devtools::document()
check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz")
check
# load HSMMSingleCell package
library(HSMMSingleCell)
# load the data
data(HSMM_expr_matrix)
data(HSMM_sample_sheet)
data(HSMM_gene_annotation)
# convert data
library(Biobase)
pd <- AnnotatedDataFrame(data = HSMM_sample_sheet)
fd <- AnnotatedDataFrame(data = HSMM_gene_annotation)
# construct a ctgGEMset
dataSet <- newctgGEMset(exprsData = HSMM_expr_matrix,
phenoData = pd,
featureData = fd)
generate_tree(dataSet, "cellTree")
check
pd <- new("AnnotatedDataFrame", data = HSMM_sample_sheet)
fd <- new("AnnotatedDataFrame", data = HSMM_gene_annotation)
HSMM <- newCellDataSet(as.matrix(HSMM_expr_matrix),
phenoData = pd, featureData = fd)
HSMM <- newCellDataSet(as.matrix(HSMM_expr_matrix),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.1,
expressionFamily = tobit(Lower = 0.1))
rpc_matrix <- relative2abs(HSMM, method = "num_genes")
HSMM <- newCellDataSet(as(as.matrix(rpc_matrix), "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = negbinomial.size())
HSMM <- estimateSizeFactors(HSMM)
HSMM <- estimateDispersions(HSMM)
HSMM <- detectGenes(HSMM, min_expr = 0.1)
expressed_genes <- row.names(subset(fData(HSMM),
num_cells_expressed >= 10))
disp_table <- dispersionTable(HSMM)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1)
HSMM <- setOrderingFilter(HSMM, unsup_clustering_genes$gene_id)
plot_ordering_genes(HSMM)
HSMM <- reduceDimension(HSMM, max_components = 2, num_dim = 6,
reduction_method = 'tSNE', verbose = T)
HSMM <- clusterCells(HSMM)
diff_test_res <- differentialGeneTest(HSMM_myo[expressed_genes,])
diff_test_res <- differentialGeneTest(HSMM[expressed_genes,])
ordering_genes <- row.names (subset(diff_test_res, qval < 0.01))
HSMM <- setOrderingFilter(HSMM, ordering_genes)
HSMM <- reduceDimension(HSMM, max_components = 2,
method = 'DDRTree')
HSMM <- orderCells(HSMM)
fData(HSMM)$use_for_ordering <-
fData(HSMM)$num_cells_expressed > 0.05 * ncol(HSMM)
HSMM <- reduceDimension(HSMM,
max_components = 2,
norm_method = 'log',
num_dim = 3,
reduction_method = 'tSNE',
verbose = T)
plot_cell_clusters(HSMM_myo, color_by = 'as.factor(Cluster)')
plot_cell_clusters(HSMM, color_by = 'as.factor(Cluster)')
HSMM2 <- clusterCells(HSMM, verbose = F)
plot_cell_clusters(HSMM2, color_by = 'as.factor(Cluster)')
clustering_DEG_genes <-
differentialGeneTest(HSMM[HSMM_expressed_genes,],
fullModelFormulaStr = '~Cluster')
clustering_DEG_genes <-
differentialGeneTest(HSMM,
fullModelFormulaStr = '~Cluster')
HSMM <- newCellDataSet(
as.matrix(HSMM_expr_matrix),
phenoData = pd,
featureData = fd,
featureData = fd,
lowerDetectionLimit = 0.1,
expressionFamily = tobit(Lower = 0.1)
)
rpc_matrix <- relative2abs(HSMM, method = "num_genes")
HSMM <- newCellDataSet(
as.matrix(HSMM_expr_matrix),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.1,
expressionFamily = tobit(Lower = 0.1)
)
rpc_matrix <- relative2abs(HSMM, method = "num_genes")
HSMM <- newCellDataSet(
as(as.matrix(rpc_matrix), "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = negbinomial.size()
)
HSMM <- estimateSizeFactors(HSMM)
HSMM <- estimateDispersions(HSMM)
HSMM <- detectGenes(HSMM, min_expr = 0.1)
expressed_genes <- row.names(subset(fData(HSMM),
num_cells_expressed >= 10))
disp_table <- dispersionTable(HSMM)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1)
HSMM <- setOrderingFilter(HSMM, unsup_clustering_genes$gene_id)
plot_ordering_genes(HSMM)
HSMM <- reduceDimension(
HSMM,
max_components = 2,
num_dim = 6,
reduction_method = 'tSNE',
verbose = T
)
HSMM <- clusterCells(HSMM)
fData(HSMM)$use_for_ordering <-
fData(HSMM)$num_cells_expressed > 0.05 * ncol(HSMM)
HSMM <- reduceDimension(
HSMM,
max_components = 2,
norm_method = 'log',
num_dim = 3,
reduction_method = 'tSNE',
verbose = T
)
plot_cell_clusters(HSMM, color_by = 'as.factor(Cluster)')
HSMM <- clusterCells(HSMM, verbose = F)
plot_cell_clusters(HSMM, color_by = 'as.factor(Cluster)')
HSMM <- newCellDataSet(
as.matrix(HSMM_expr_matrix),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.1,
expressionFamily = tobit(Lower = 0.1)
)
rpc_matrix <- relative2abs(HSMM, method = "num_genes")
HSMM <- newCellDataSet(
as(as.matrix(rpc_matrix), "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = negbinomial.size()
)
HSMM <- estimateSizeFactors(HSMM)
HSMM <- estimateDispersions(HSMM)
HSMM <- detectGenes(HSMM, min_expr = 0.1)
expressed_genes <- row.names(subset(fData(HSMM),
num_cells_expressed >= 10))
disp_table <- dispersionTable(HSMM)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1)
HSMM <- setOrderingFilter(HSMM, unsup_clustering_genes$gene_id)
plot_ordering_genes(HSMM)
fData(HSMM)$use_for_ordering <-
fData(HSMM)$num_cells_expressed > 0.05 * ncol(HSMM)
HSMM <- reduceDimension(
HSMM,
max_components = 2,
norm_method = 'log',
num_dim = 3,
reduction_method = 'tSNE',
verbose = T
)
plot_cell_clusters(HSMM, color_by = 'as.factor(Cluster)')
HSMM <- clusterCells(HSMM, verbose = F)
plot_cell_clusters(HSMM, color_by = 'as.factor(Cluster)')
clustering_DEG_genes <-
differentialGeneTest(HSMM[HSMM_expressed_genes, ],
fullModelFormulaStr = '~Cluster')
clustering_DEG_genes <-
differentialGeneTest(HSMM,
fullModelFormulaStr = '~Cluster')
HSMM_ordering_genes <-
row.names(clustering_DEG_genes)[order(clustering_DEG_genes$qval)][1:1000]
HSMM <-
setOrderingFilter(HSMM,
ordering_genes = HSMM_ordering_genes)
HSMM <-
reduceDimension(HSMM, method = 'DDRTree')
HSMM <-
orderCells(HSMM)
plot_cell_trajectory(HSMM, color_by = 'as.factor(Cluster)')
plot_cell_trajectory(HSMM, color_by = "Pseudotime")
plot_cell_trajectory(HSMM, color_by = "State")
HSMM <- newCellDataSet(
as.matrix(HSMM_expr_matrix),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.1,
expressionFamily = tobit(Lower = 0.1)
)
rpc_matrix <- relative2abs(HSMM, method = "num_genes")
HSMM <- newCellDataSet(
as(as.matrix(rpc_matrix), "sparseMatrix"),
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = negbinomial.size()
)
HSMM <- estimateSizeFactors(HSMM)
HSMM <- estimateDispersions(HSMM)
HSMM <- detectGenes(HSMM, min_expr = 0.1)
expressed_genes <- row.names(subset(fData(HSMM),
num_cells_expressed >= 10))
disp_table <- dispersionTable(HSMM)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1)
HSMM <- setOrderingFilter(HSMM, unsup_clustering_genes$gene_id)
plot_ordering_genes(HSMM)
HSMM <- reduceDimension(
HSMM,
max_components = 2,
num_dim = 6,
reduction_method = 'tSNE',
verbose = T
)
HSMM <- clusterCells(HSMM)
diff_test_res <- differentialGeneTest(HSMM[expressed_genes, ])
ordering_genes <- row.names (subset(diff_test_res, qval < 0.01))
HSMM <- setOrderingFilter(HSMM, ordering_genes)
HSMM <- reduceDimension(HSMM, max_components = 2,
method = 'DDRTree')
HSMM <- orderCells(HSMM)
check
check
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?sink
library(ctgGEM)
checkout <- capture.output(check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"))
devtools::document()
devtools::document()
checkout <- capture.output(check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"))
devtools::document()
checkout <- capture.output(check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"))
checkout
capture.output(check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt")
capture.output(check <- BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
check
devtools::document()
library(ctgGEM)
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
devtools::use_package("BiocStyle", type = "Suggests")
knitr::opts_chunk$set(echo = TRUE)
library(ctgGEM)
# load HSMMSingleCell package
library(HSMMSingleCell)
# load the data
data(HSMM_expr_matrix)
data(HSMM_sample_sheet)
data(HSMM_gene_annotation)
library(Biobase)
pd <- AnnotatedDataFrame(data = HSMM_sample_sheet)
fd <- AnnotatedDataFrame(data = HSMM_gene_annotation)
library(ctgGEMset)
toyGEMset <- newctgGEMset(exprsData = HSMM_expr_matrix,
phenoData = pd,
featureData = fd)
cellTreeInfo(toyGEMset) <- "Hours"
monocleInfo(toyGEMset, "gene_id") <- "gene_short_name"
monocleInfo(toyGEMset, "cell_id_1") <- "MYF5"
monocleInfo(toyGEMset, "cell_id_2") <- "ANPEP"
monocleInfo(toyGEMset, "ex_type") <- "FPKM"
TSCANinfo(toyGEMset) <- "ENSG00000000003.10"
TSCANinfo(toyGEMset) <- "ENSG00000000003.10"
sincellInfo(toyGEMset, "method") <- "pearson"
sincellInfo(toyGEMset, "method") <- "pearson"
sincellInfo(toyGEMset, "method") <- "classical-MDS"
sincellInfo(toyGEMset, "MDS.distance") <- "spearman"
sincellInfo(toyGEMset, "clust.method") <- "k-medoids"
sincellInfo(toyGEMset, "clust.method") <- "k-medoids"
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "cellTree")
plotOriginalTree(toyGEMset, "cellTreeTopics")
plotOriginalTree(toyGEMset, "cellTreeGrouping.png")
plotOriginalTree(toyGEMset, "cellTreeTopics")
plotOriginalTree(toyGEMset, "cellTreeGrouping")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "monocle")
names(originalTrees(toyGEMset))
plotOriginalTree(toyGEMset, "monocle")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "TSCAN")
plotOriginalTree(toyGEMset, "TSCANclustering")
plotOriginalTree(toyGEMset, "TSCANsingleGene")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "destiny")
names(originalTrees(toyGEMset))
plotOriginalTree(toyGEMset, "destinyDM")
plotOriginalTree(toyGEMset, "destinyDM")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "sincell")
plotOriginalTree(toyGEMset, "TSCANclustering")
plotOriginalTree(toyGEMset, "TSCANsingleGene")
TSCANinfo(toyGEMset) <- "ENSG00000000003.10"
warnings()
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
knitr::opts_chunk$set(echo = TRUE)
plotOriginalTree(toyGEMset, "cellTreeTopics")
devtools::document()
library(ctgGEM)
rm(list = ls())
library(ctgGEM)
library(ctgGEM)
knitr::opts_chunk$set(echo = TRUE)
# load HSMMSingleCell package
library(HSMMSingleCell)
# load the data
data(HSMM_expr_matrix)
data(HSMM_sample_sheet)
data(HSMM_gene_annotation)
library(Biobase)
pd <- AnnotatedDataFrame(data = HSMM_sample_sheet)
fd <- AnnotatedDataFrame(data = HSMM_gene_annotation)
toyGEMset <- newctgGEMset(exprsData = HSMM_expr_matrix,
phenoData = pd,
featureData = fd)
cellTreeInfo(toyGEMset) <- "Hours"
monocleInfo(toyGEMset, "gene_id") <- "gene_short_name"
monocleInfo(toyGEMset, "cell_id_1") <- "MYF5"
monocleInfo(toyGEMset, "cell_id_2") <- "ANPEP"
monocleInfo(toyGEMset, "ex_type") <- "FPKM"
TSCANinfo(toyGEMset) <- "ENSG00000000003.10"
sincellInfo(toyGEMset, "method") <- "pearson"
sincellInfo(toyGEMset, "method") <- "classical-MDS"
sincellInfo(toyGEMset, "MDS.distance") <- "spearman"
sincellInfo(toyGEMset, "clust.method") <- "k-medoids"
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "cellTree")
plotOriginalTree(toyGEMset, "cellTreeTopics")
plotOriginalTree(toyGEMset, "cellTreeGrouping")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "destiny")
plotOriginalTree(toyGEMset, "destinyDM")
plotOriginalTree(toyGEMset, "destinyDPT")
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "monocle")
?`Biobase-package`
library(ctgGEM)
knitr::opts_chunk$set(echo = TRUE)
toyGEMset <- generate_tree(dataSet = toyGEMset, treeType = "monocle")
x <- c('a', 'b', 'c')
which('a' %in% x, arr.ind = TRUE)
which('b' %in% x, arr.ind = TRUE)
which(x %in% 'b', arr.ind = TRUE)
which(x %in% 'c', arr.ind = TRUE)
y <- 'c'
which(x %in% y, arr.ind = TRUE)
rm(list = ls())
library(ctgGEM)
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
devtools::document()
devtools::document()
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
devtools::document()
devtools::document()
devtools::document()
library(ctgGEM)
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
library(ctgGEM)
capture.output(BiocCheck::BiocCheck("D:/OneDrive - The University of South Dakota/Work Projects/Work/ctgGEM_0.1.0.tar.gz"), file = "bioccheck.txt", type = "message")
